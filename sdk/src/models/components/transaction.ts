/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { z } from "zod";

export enum Currency {
    Usd = "USD",
    Eur = "EUR",
    Gbp = "GBP",
}

export type Transaction = {
    id: string;
    accountId: string;
    currency: Currency;
    amount: Decimal$ | number;
    createdAt: Date;
};

/** @internal */
export const Currency$ = z.nativeEnum(Currency);

/** @internal */
export namespace Transaction$ {
    export type Inbound = {
        id: string;
        account_id: string;
        currency: Currency;
        amount: string;
        created_at: string;
    };

    export const inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            account_id: z.string(),
            currency: Currency$,
            amount: z.string().transform((v) => new Decimal$(v)),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                id: v.id,
                accountId: v.account_id,
                currency: v.currency,
                amount: v.amount,
                createdAt: v.created_at,
            };
        });

    export type Outbound = {
        id: string;
        account_id: string;
        currency: Currency;
        amount: string;
        created_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transaction> = z
        .object({
            id: z.string(),
            accountId: z.string(),
            currency: Currency$,
            amount: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
            createdAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                id: v.id,
                account_id: v.accountId,
                currency: v.currency,
                amount: v.amount,
                created_at: v.createdAt,
            };
        });
}
