/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

export type UploadResult = {
    url: string;
    ttl?: RFCDate | undefined;
};

/** @internal */
export namespace UploadResult$ {
    export type Inbound = {
        url: string;
        ttl?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UploadResult, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string(),
            ttl: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
        })
        .transform((v) => {
            return {
                url: v.url,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
            };
        });

    export type Outbound = {
        url: string;
        ttl?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadResult> = z
        .object({
            url: z.string(),
            ttl: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
        })
        .transform((v) => {
            return {
                url: v.url,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
            };
        });
}
