/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { blobLikeSchema } from "../../types";
import { z } from "zod";

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type UploadForm = {
    file: FileT | Blob;
    path?: string | undefined;
};

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        fileName: string;
        content: Uint8Array | string;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            fileName: z.string(),
            content: b64$.zodInbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            fileName: z.string(),
            content: b64$.zodOutbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });
}

/** @internal */
export namespace UploadForm$ {
    export type Inbound = {
        file: FileT$.Inbound;
        path?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UploadForm, z.ZodTypeDef, Inbound> = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema),
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                file: v.file,
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });

    export type Outbound = {
        file: FileT$.Outbound | Blob;
        path?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadForm> = z
        .object({
            file: z.lazy(() => FileT$.outboundSchema).or(blobLikeSchema),
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                file: v.file,
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });
}
