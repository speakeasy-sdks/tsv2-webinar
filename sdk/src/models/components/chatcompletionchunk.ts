/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Data = {
    content?: string | undefined;
    stop?: boolean | undefined;
};

/**
 * Represents a single event in a chat completion stream
 */
export type ChatCompletionChunk = {
    data: Data;
};

/** @internal */
export namespace Data$ {
    export type Inbound = {
        content?: string | undefined;
        stop?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string().optional(),
            stop: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.stop === undefined ? null : { stop: v.stop }),
            };
        });

    export type Outbound = {
        content?: string | undefined;
        stop?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            content: z.string().optional(),
            stop: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.stop === undefined ? null : { stop: v.stop }),
            };
        });
}

/** @internal */
export namespace ChatCompletionChunk$ {
    export type Inbound = {
        data: string;
    };

    export const inboundSchema: z.ZodType<ChatCompletionChunk, z.ZodTypeDef, Inbound> = z
        .object({
            data: z
                .string()
                .transform((v, ctx) => {
                    try {
                        return JSON.parse(v);
                    } catch (err) {
                        ctx.addIssue({
                            code: z.ZodIssueCode.custom,
                            message: `malformed json: ${err}`,
                        });
                        return z.NEVER;
                    }
                })
                .pipe(z.lazy(() => Data$.inboundSchema)),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatCompletionChunk> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
