/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import { createPageIterator, PageIterator, Paginator } from "../types";
import jp from "jsonpath";

export class Banking extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    async transact(
        id: string,
        requestBody: operations.TransactRequestBody,
        options?: RequestOptions
    ): Promise<operations.TransactResponse> {
        const input$: operations.TransactRequest = {
            id: id,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.TransactRequest$.outboundSchema.parse(input$);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/accounts/{id}/transactions")(pathParams$);

        const response = await this.fetch$(
            { method: "POST", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.TransactResponse$.inboundSchema.parse({
                ...responseFields$,
                Transaction: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async listTransactions(
        id: string,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTransactionsResponse>> {
        const input$: operations.ListTransactionsRequest = {
            id: id,
            cursor: cursor,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListTransactionsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/accounts/{id}/transactions")(pathParams$);

        const query$ = [
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const response = await this.fetch$(
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.ListTransactionsResponse> => {
            const nextCursor = jp.value(responseData, "$.next");
            if (nextCursor == null) {
                return () => null;
            }

            return () => this.listTransactions(id, nextCursor, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.ListTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                Transactions: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
